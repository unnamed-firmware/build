From 2e938fd5d58c7a032a65cfbebc3174a495d71d32 Mon Sep 17 00:00:00 2001
From: Alberto Ponces <ponces26@gmail.com>
Date: Wed, 2 Apr 2025 15:35:04 +0100
Subject: [PATCH 56/57] Revert "FOD support for Asus, Samsung recent Xiaomi and
 RedMagic 8 devices"

This reverts commit 4fd47b77373da8fa534f82d32cbf1e624d243cf2.
---
 packages/SystemUI/Android.bp                  |   4 -
 .../systemui/biometrics/UdfpsController.java  |  76 +----
 services/core/Android.bp                      |   5 -
 .../server/biometrics/AuthService.java        | 306 +-----------------
 .../fingerprint/aidl/FingerprintProvider.java |  23 --
 5 files changed, 12 insertions(+), 402 deletions(-)

diff --git a/packages/SystemUI/Android.bp b/packages/SystemUI/Android.bp
index 0497029b2a3c..3d250fd82473 100644
--- a/packages/SystemUI/Android.bp
+++ b/packages/SystemUI/Android.bp
@@ -512,10 +512,6 @@ android_library {
         "androidx.activity_activity-compose",
         "androidx.compose.animation_animation-graphics",
         "androidx.lifecycle_lifecycle-viewmodel-compose",
-        "vendor.goodix.hardware.biometrics.fingerprint-V2.1-java",
-        "vendor.xiaomi.hw.touchfeature-V1.0-java",
-        "vendor.xiaomi.hardware.fingerprintextension-V1.0-java",
-        "vendor.nubia.ifaa-V1.0-java",
     ],
     libs: [
         "keepanno-annotations",
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 26feaf7a09f0..a9133e45e93f 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -43,7 +43,6 @@ import android.hardware.fingerprint.FingerprintSensorProperties;
 import android.hardware.fingerprint.FingerprintSensorPropertiesInternal;
 import android.hardware.fingerprint.IUdfpsOverlayController;
 import android.hardware.fingerprint.IUdfpsOverlayControllerCallback;
-import android.hardware.display.ColorDisplayManager;
 import android.hardware.input.InputManager;
 import android.os.Build;
 import android.os.CancellationSignal;
@@ -51,7 +50,6 @@ import android.os.Handler;
 import android.os.Looper;
 import android.os.PowerManager;
 import android.os.Trace;
-import android.os.SystemProperties;
 import android.os.VibrationAttributes;
 import android.os.VibrationEffect;
 import android.util.Log;
@@ -122,12 +120,8 @@ import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Set;
 import java.util.concurrent.Executor;
-import java.io.File;
-import java.io.FileWriter;
-import java.io.IOException;
 
 import javax.inject.Inject;
-import vendor.nubia.ifaa.V1_0.IIfaa;
 
 /**
  * Shows and hides the under-display fingerprint sensor (UDFPS) overlay, handles UDFPS touch events,
@@ -188,8 +182,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
     @NonNull private final InputManager mInputManager;
     @NonNull private final UdfpsKeyguardAccessibilityDelegate mUdfpsKeyguardAccessibilityDelegate;
     @NonNull private final SelectedUserInteractor mSelectedUserInteractor;
-    @NonNull private final ColorDisplayManager mColorDisplayManager;
-    private boolean mIgnoreExtraDim;
     private final boolean mIgnoreRefreshRate;
     private final KeyguardTransitionInteractor mKeyguardTransitionInteractor;
 
@@ -262,46 +254,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
             mScreenOn = false;
         }
     };
-    // Nubia 6 series fingerprint control command
-    // cmd = 13 -> finger down
-    // cmd = 14 -> after UI ready
-    // cmd = 15 -> finger up
-    public byte[] processCmd(int cmd, int param1, int param2, byte[] send_buf, int length) {
-        try {
-            if (cmd == 999) {
-                Log.d(TAG, "processCmd: 999");
-                return null;
-            }
-            ArrayList<Byte> sendList = new ArrayList<>();
-            if (send_buf != null) {
-                for (byte b : send_buf) {
-                    sendList.add(Byte.valueOf(b));
-                }
-            }
-            if (send_buf == null) {
-                Log.d(TAG, "FingerprintService send_buf = " + send_buf);
-            }
-            IIfaa iIfaaDaemon = IIfaa.getService();
-            if (iIfaaDaemon == null) {
-                Log.d(TAG, "processCmd: no iIfaaDaemon!");
-                return null;
-            }
-            ArrayList<Byte> resultList = iIfaaDaemon.processCmd(cmd, param1, param2, sendList, length);
-            int n = resultList.size();
-            Log.d(TAG, "FingerprintService result length n = " + n);
-            if (n == 0) {
-                return null;
-            }
-            byte[] result = new byte[n];
-            for (int i = 0; i < n; i++) {
-                result[i] = resultList.get(i).byteValue();
-            }
-            return result;
-        } catch (Exception e) {
-            e.printStackTrace();
-            return null;
-        }
-    };
 
     @Override
     public void dump(@NonNull PrintWriter pw, @NonNull String[] args) {
@@ -748,8 +700,7 @@ public class UdfpsController implements DozeReceiver, Dumpable {
             Lazy<DefaultUdfpsTouchOverlayViewModel> defaultUdfpsTouchOverlayViewModel,
             @NonNull UdfpsOverlayInteractor udfpsOverlayInteractor,
             @NonNull PowerInteractor powerInteractor,
-            @Application CoroutineScope scope,
-            @NonNull ColorDisplayManager colorDisplayManager) {
+            @Application CoroutineScope scope) {
         mContext = context;
         mExecution = execution;
         mVibrator = vibrator;
@@ -796,7 +747,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         mUdfpsKeyguardAccessibilityDelegate = udfpsKeyguardAccessibilityDelegate;
         mSelectedUserInteractor = selectedUserInteractor;
         mKeyguardTransitionInteractor = keyguardTransitionInteractor;
-        mColorDisplayManager = colorDisplayManager;
 
         mTouchProcessor = singlePointerTouchProcessor;
         mSessionTracker = sessionTracker;
@@ -868,10 +818,7 @@ public class UdfpsController implements DozeReceiver, Dumpable {
             Log.d(TAG, "showUdfpsOverlay | the overlay is already showing");
             return;
         }
-        mIgnoreExtraDim = mColorDisplayManager.isReduceBrightColorsActivated();
-        if (mIgnoreExtraDim) {
-            Log.d(TAG, "Current extra dim state (showUdfpsOverlay): " + mIgnoreExtraDim);
-        }
+
         mOverlay = overlay;
         final int requestReason = overlay.getRequestReason();
         if (requestReason == REASON_AUTH_KEYGUARD
@@ -1091,10 +1038,6 @@ public class UdfpsController implements DozeReceiver, Dumpable {
             return;
         }
         if (isOptical()) {
-            if (mIgnoreExtraDim) {
-                mColorDisplayManager.setReduceBrightColorsActivated(false);
-                Log.d(TAG, "Extra dim disabled");
-            }
             mLatencyTracker.onActionStart(ACTION_UDFPS_ILLUMINATE);
         }
         // Refresh screen timeout and boost process priority if possible.
@@ -1119,19 +1062,12 @@ public class UdfpsController implements DozeReceiver, Dumpable {
                     mUdfpsDisplayMode.enable(() -> dispatchOnUiReady(requestId));
             }
         }
-        if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
-          processCmd(13, 0, 0, new byte[0], 0);
-        }
 
         if (isOptical()) {
             for (Callback cb : mCallbacks) {
                 cb.onFingerDown();
             }
         }
-        if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
-          processCmd(14, 0, 0, new byte[0], 0);
-        }
-
     }
 
     private void onFingerUp(long requestId, @NonNull View view) {
@@ -1165,16 +1101,8 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         mActivePointerId = MotionEvent.INVALID_POINTER_ID;
         mAcquiredReceived = false;
         if (mOnFingerDown) {
-            if (mIgnoreExtraDim && isOptical()) {
-                mColorDisplayManager.setReduceBrightColorsActivated(true);
-                Log.d(TAG, "Extra dim restored");
-            }
             mFingerprintManager.onPointerUp(requestId, mSensorProps.sensorId, pointerId, x,
                     y, minor, major, orientation, time, gestureStart, isAod);
-            if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
-                processCmd(15, 0, 0, new byte[0], 0);
-            }
-
             if (isOptical()) {
                 for (Callback cb : mCallbacks) {
                     cb.onFingerUp();
diff --git a/services/core/Android.bp b/services/core/Android.bp
index cf7457b96423..f88345a284c4 100644
--- a/services/core/Android.bp
+++ b/services/core/Android.bp
@@ -250,11 +250,6 @@ java_library_static {
         // HIDL
         "vendor.mediatek.hardware.mtkpower-V1.1-java",
         "vendor.samsung.hardware.sysinput-V1.2-java",
-        "vendor.goodix.hardware.biometrics.fingerprint-V2.1-java",
-        "vendor.samsung.hardware.biometrics.fingerprint-V3.0-java",
-        "vendor.oplus.hardware.biometrics.fingerprint-V2.1-java",
-        "vendor.oppo.hardware.biometrics.fingerprint-V2.1-java",
-        "vendor.xiaomi.hardware.fingerprintextension-V1.0-java",
 
         //AIDL
         "vendor.samsung.hardware.sysinput-V1-java",
diff --git a/services/core/java/com/android/server/biometrics/AuthService.java b/services/core/java/com/android/server/biometrics/AuthService.java
index 5694a5a73747..012568837d8b 100644
--- a/services/core/java/com/android/server/biometrics/AuthService.java
+++ b/services/core/java/com/android/server/biometrics/AuthService.java
@@ -80,25 +80,6 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
-import android.hardware.display.DisplayManager;
-
-import android.graphics.Point;
-import android.text.TextUtils;
-import android.util.DisplayMetrics;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileReader;
-import java.io.PrintWriter;
-
-import android.os.FileObserver;
-import android.os.Build;
-
-import vendor.samsung.hardware.biometrics.fingerprint.V3_0.ISehBiometricsFingerprint;
-import vendor.goodix.hardware.biometrics.fingerprint.V2_1.IGoodixFingerprintDaemon;
-import vendor.samsung.hardware.sysinput.V1_0.ISehSysInputDev;
-
-import vendor.xiaomi.hardware.fingerprintextension.V1_0.IXiaomiFingerprint;
-
 /**
  * System service that provides an interface for authenticating with biometrics and
  * PIN/pattern/password to BiometricPrompt and lock screen.
@@ -117,11 +98,6 @@ public class AuthService extends SystemService {
     @VisibleForTesting
     final IAuthService.Stub mImpl;
 
-    private FileObserver fodFileObserver = null;
-    private ISehBiometricsFingerprint mSamsungFingerprint = null;
-
-    private IXiaomiFingerprint mXiaomiFingerprint = null;
-
     /**
      * Class for injecting dependencies into AuthService.
      * TODO(b/141025588): Replace with a dependency injection framework (e.g. Guice, Dagger).
@@ -784,11 +760,11 @@ public class AuthService extends SystemService {
             final int firstApiLevel = SystemProperties.getInt(SYSPROP_FIRST_API_LEVEL, 0);
             final int apiLevel = SystemProperties.getInt(SYSPROP_API_LEVEL, firstApiLevel);
             String[] configStrings = mInjector.getConfiguration(getContext());
-            if (configStrings.length == 0) {
+            if (configStrings.length == 0 && apiLevel <= Build.VERSION_CODES.R) {
                 // For backwards compatibility with R where biometrics could work without being
                 // configured in config_biometric_sensors. In the absence of a vendor provided
                 // configuration, we assume the weakest biometric strength (i.e. convenience).
-                Slog.w(TAG, "Found vendor partition without config_biometric_sensors");
+                Slog.w(TAG, "Found R vendor partition without config_biometric_sensors");
                 configStrings = generateRSdkCompatibleConfiguration();
             }
             hidlConfigs = new SensorConfig[configStrings.length];
@@ -801,102 +777,6 @@ public class AuthService extends SystemService {
 
         registerAuthenticators();
         mInjector.publishBinderService(this, mImpl);
-        try {
-            mSamsungFingerprint = ISehBiometricsFingerprint.getService();
-            android.util.Log.e("PHH", "Got samsung fingerprint HAL");
-        } catch(Exception e) {
-            android.util.Log.e("PHH", "Failed getting Samsung fingerprint HAL", e);
-        }
-        try {
-            mXiaomiFingerprint = IXiaomiFingerprint.getService();
-            android.util.Log.e("PHH", "Got xiaomi fingerprint HAL");
-        } catch(Exception e) {
-            android.util.Log.e("PHH", "Failed getting xiaomi fingerprint HAL", e);
-        }
-        if(samsungHasCmd("fod_enable") && mSamsungFingerprint != null) {
-            samsungCmd("fod_enable,1,1,0");
-            String actualMaskBrightnessPath = "/sys/class/lcd/panel/actual_mask_brightness";
-            android.util.Log.e("PHH-Enroll", "Reading actual brightness file gives " + readFile(actualMaskBrightnessPath));
-            fodFileObserver = new FileObserver(actualMaskBrightnessPath, FileObserver.MODIFY) {
-                @Override
-                public void onEvent(int event, String path) {
-                    String actualMask = readFile(actualMaskBrightnessPath);
-                    try {
-                        mSamsungFingerprint = ISehBiometricsFingerprint.getService();
-                    } catch(Exception e) {}
-                    Slog.d("PHH-Enroll", "New actual mask brightness is " + actualMask);
-                    try {
-                        int eventReq = 0;
-                        if("0".equals(actualMask)) {
-                            eventReq = 1; //released
-                        } else {
-                            eventReq = 2; //pressed
-                        }
-                        if(mSamsungFingerprint != null) {
-                            mSamsungFingerprint.sehRequest(22 /* SEM_FINGER_STATE */, eventReq, new java.util.ArrayList<Byte>(),
-                                    (int retval, java.util.ArrayList<Byte> out) -> {} );
-                        }
-                    } catch(Exception e) {
-                        Slog.d("PHH-Enroll", "Failed setting samsung event for mask observer", e);
-                    }
-                }
-            };
-            fodFileObserver.startWatching();
-        }
-
-        String asusGhbmOnAchieved = "/sys/class/drm/ghbm_on_achieved";
-        if( (new File(asusGhbmOnAchieved)).exists()) {
-            fodFileObserver = new FileObserver(asusGhbmOnAchieved, FileObserver.MODIFY) {
-                boolean wasOn = false;
-                @Override
-                public void onEvent(int event, String path) {
-                    String spotOn = readFile(asusGhbmOnAchieved);
-                    if("1".equals(spotOn)) {
-                        if(!wasOn) {
-                            try {
-                                IGoodixFingerprintDaemon goodixDaemon = IGoodixFingerprintDaemon.getService();
-
-                                //Send UI ready
-                                goodixDaemon.sendCommand(200002, new java.util.ArrayList<Byte>(), (returnCode, resultData) -> {
-                                    Slog.e(TAG, "Goodix send command touch pressed returned code "+ returnCode);
-                                });
-                            } catch(Throwable t) {
-                                Slog.d("PHH-Enroll", "Failed sending goodix command", t);
-                            }
-                        }
-                        wasOn = true;
-                    } else {
-                        wasOn = false;
-                    }
-                }
-            };
-            fodFileObserver.startWatching();
-        }
-
-        String xiaomiFodPressedStatusPath = "/sys/class/touch/touch_dev/fod_press_status";
-        if(new File(xiaomiFodPressedStatusPath).exists() && mXiaomiFingerprint != null) {
-            fodFileObserver = new FileObserver(xiaomiFodPressedStatusPath, FileObserver.MODIFY) {
-                @Override
-                public void onEvent(int event, String path) {
-                    String isFodPressed = readFile(xiaomiFodPressedStatusPath);
-                    Slog.d("PHH-Enroll", "Fod pressed status: " + isFodPressed);
-                    Slog.d("PHH-Enroll", "Within xiaomi scenario for FOD");
-
-                    try {
-                    if("0".equals(isFodPressed)) {
-                        Slog.d("PHH-Enroll", "Fod un-pressed!");
-                        mXiaomiFingerprint.extCmd(android.os.SystemProperties.getInt("phh.xiaomi.fod.enrollment.id", 4), 0);
-                    } else if("1".equals(isFodPressed)) {
-                        Slog.d("PHH-Enroll", "Fod pressed!");
-                        mXiaomiFingerprint.extCmd(android.os.SystemProperties.getInt("phh.xiaomi.fod.enrollment.id", 4), 1);
-                    }
-                    } catch(Exception e) {
-                        Slog.d("PHH-Enroll", "Failed Xiaomi async extcmd", e);
-                    }
-                }
-            };
-            fodFileObserver.startWatching();
-        }
     }
 
     private void registerAuthenticators() {
@@ -1028,13 +908,15 @@ public class AuthService extends SystemService {
 
         handlerProvider.getFingerprintHandler().post(() -> {
             final FingerprintSensorConfigurations mFingerprintSensorConfigurations =
-                    new FingerprintSensorConfigurations(fingerprintAidlInstances != null
-                            && fingerprintAidlInstances.length > 0);
+                    new FingerprintSensorConfigurations(!(hidlConfigStrings != null
+                            && hidlConfigStrings.length > 0));
+
+            if (hidlConfigStrings != null && hidlConfigStrings.length > 0) {
+                mFingerprintSensorConfigurations.addHidlSensors(hidlConfigStrings, context);
+            }
 
             if (fingerprintAidlInstances != null && fingerprintAidlInstances.length > 0) {
                 mFingerprintSensorConfigurations.addAidlSensors(fingerprintAidlInstances);
-            } else if (hidlConfigStrings != null && hidlConfigStrings.length > 0) {
-                mFingerprintSensorConfigurations.addHidlSensors(hidlConfigStrings, context);
             }
 
             if (fingerprintService != null) {
@@ -1103,119 +985,14 @@ public class AuthService extends SystemService {
                 ? modality : (modality & ~BiometricAuthenticator.TYPE_CREDENTIAL);
     }
 
-    static public int[] dynamicUdfpsProps(Context ctxt) {
-        DisplayManager mDM = (DisplayManager) ctxt.getSystemService(Context.DISPLAY_SERVICE);
-        Point displayRealSize = new Point();
-        DisplayMetrics displayMetrics = new DisplayMetrics();
-        mDM.getDisplay(0).getRealSize(displayRealSize);
-        mDM.getDisplay(0).getMetrics(displayMetrics);
-
-        if(readFile("/sys/class/fingerprint/fingerprint/position") != null) {
-            try {
-            ISehSysInputDev s = ISehSysInputDev.getService();
-            s.getTspFodInformation(0, (a, b) -> {
-                Slog.d("PHH-Enroll", "TspFod info " + a + ", " + b);
-            });
-            s.getTspFodPosition(0, (a, b) -> {
-                Slog.d("PHH-Enroll", "TspFod info " + a + ", " + b);
-            });
-            }catch(Throwable t) {
-                Slog.d("PHH-Enroll", "heya ", t);
-            }
-
-
-            android.util.Log.d("PHH", "Samsung fingerprint");
-            String[] fodPositionArray = readFile("/sys/class/fingerprint/fingerprint/position").split(",");
-            float bottomMM = Float.parseFloat(fodPositionArray[0]);
-            float areaSizeMM = Float.parseFloat(fodPositionArray[5]);
-            float heightMM = Float.parseFloat(fodPositionArray[2]);
-            float bottomInch = bottomMM * 0.0393700787f;
-            float areaSizeInch = areaSizeMM * 0.0393700787f;
-            float heightInch = heightMM * 0.0393700787f;
-            int bottomPx = (int)(bottomInch * displayMetrics.ydpi);
-            int areaSizePx = (int)(areaSizeInch * displayMetrics.ydpi);
-            int midDistPx = (int)(areaSizeInch * displayMetrics.ydpi / 2.0f);
-
-            float mW = areaSizePx/2;
-            float mH = areaSizePx/2;
-            float mX = displayRealSize.x/2;
-            //float mY = displayRealSize.y - bottomPx - midDistPx;
-            float mY = displayRealSize.y - (bottomInch * displayMetrics.ydpi) - (areaSizeInch * displayMetrics.ydpi / 2.0f);
-
-            samsungCmd(String.format("fod_rect,%d,%d,%d,%d", (int)(mX - mW/2), (int)(mY - mW/2), (int)(mX + mW/2), (int)(mY + mW/2)));
-            Slog.d("PHH-Enroll", "Display real size is " + displayRealSize.y + ", dpy " + displayMetrics.ydpi);
-
-            int udfpsProps[] = new int[3];
-            udfpsProps[0] = (int)mX;
-            udfpsProps[1] = (int)mY;
-            udfpsProps[2] = (int)mW;
-
-            try {
-                mSamsungFingerprint = ISehBiometricsFingerprint.getService();
-                Slog.d("PHH-Enroll", "Samsung ask for sensor status");
-                mSamsungFingerprint.sehRequest(6, 0, new java.util.ArrayList(), (int retval, java.util.ArrayList<Byte> out) -> {
-                    Slog.d("PHH-Enroll", "Result is " + retval);
-                    for(int i=0; i<out.size(); i++) {
-                        Slog.d("PHH-Enroll", "\t" + i + ":" + out.get(i));
-                    }
-                } );
-                Slog.d("PHH-Enroll", "Samsung ask for sensor brightness value");
-                mSamsungFingerprint.sehRequest(32, 0, new java.util.ArrayList(), (int retval, java.util.ArrayList<Byte> out) -> {
-                    Slog.d("PHH-Enroll", "Result is " + retval);
-                    for(int i=0; i<out.size(); i++) {
-                        Slog.d("PHH-Enroll", "\t" + i + ":" + out.get(i));
-                    }
-                } );
-
-            } catch(Exception e) {
-                Slog.d("PHH-Enroll", "Failed setting samsung3.0 fingerprint recognition", e);
-            }
-            return udfpsProps;
-        }
-
-        if(android.os.SystemProperties.get("ro.vendor.build.fingerprint").contains("ASUS_I006D")) {
-            int udfpsProps[] = new int[3];
-            udfpsProps[0] = displayRealSize.x/2;
-            udfpsProps[1] = 1741;
-            udfpsProps[2] = 110;
-            return udfpsProps;
-        }
-
-       String fpLocation = android.os.SystemProperties.get("persist.vendor.sys.fp.fod.location.X_Y");
-       if(!TextUtils.isEmpty(fpLocation) && fpLocation.contains(",")) {
-            int[] udfpsProps = new int[3];
-            String[] coordinates = fpLocation.split(",");
-            udfpsProps[0] = displayRealSize.x/2;
-            udfpsProps[1] = Integer.parseInt(coordinates[1]) + 100;
-
-            String[] widthHeight = android.os.SystemProperties.get("persist.vendor.sys.fp.fod.size.width_height").split(",");
-
-            udfpsProps[2] = (Integer.parseInt(widthHeight[0]) /2);
-            return udfpsProps;
-        }
-
-        return new int[0];
-    }
 
     private FingerprintSensorPropertiesInternal getHidlFingerprintSensorProps(int sensorId,
             @BiometricManager.Authenticators.Types int strength) {
         // The existence of config_udfps_sensor_props indicates that the sensor is UDFPS.
-        int[] udfpsProps = getContext().getResources().getIntArray(
+        final int[] udfpsProps = getContext().getResources().getIntArray(
                 com.android.internal.R.array.config_udfps_sensor_props);
 
-        boolean isUdfps = !ArrayUtils.isEmpty(udfpsProps);
-        if(!isUdfps) {
-            try {
-                udfpsProps = dynamicUdfpsProps(getContext());
-            } catch(Throwable t) {
-                Slog.e("PHH-Enroll", "Failed generating UDFPS props");
-            }
-        }
-        isUdfps = !ArrayUtils.isEmpty(udfpsProps);
-
-        if(udfpsProps.length > 0) {
-            Slog.d("PHH-Enroll", "Got udfps infos " + udfpsProps[0] + ", " + udfpsProps[1] + ", " + udfpsProps[2]);
-        }
+        final boolean isUdfps = !ArrayUtils.isEmpty(udfpsProps);
 
         // config_is_powerbutton_fps indicates whether device has a power button fingerprint sensor.
         final boolean isPowerbuttonFps = getContext().getResources().getBoolean(
@@ -1277,67 +1054,4 @@ public class AuthService extends SystemService {
                 componentInfo, resetLockoutRequiresHardwareAuthToken,
                 resetLockoutRequiresChallenge);
     }
-
-   private static boolean samsungHasCmd(String cmd) {
-        try {
-            File f = new File("/sys/devices/virtual/sec/tsp/cmd_list");
-            if(!f.exists()) return false;
-
-            android.util.Log.d("PHH", "Managed to grab cmd list, checking...");
-            BufferedReader b = new BufferedReader(new FileReader(f));
-            String line = null;
-            while( (line = b.readLine()) != null) {
-                if(line.equals(cmd)) return true;
-            }
-            android.util.Log.d("PHH", "... nope");
-            return false;
-        } catch(Exception e) {
-            android.util.Log.d("PHH", "Failed reading cmd_list", e);
-            return false;
-        }
-    }
-
-    public static void samsungCmd(String cmd) {
-        try {
-            writeFile("/sys/devices/virtual/sec/tsp/cmd", cmd);
-
-            String status = readFile("/sys/devices/virtual/sec/tsp/cmd_status");
-            String ret = readFile("/sys/devices/virtual/sec/tsp/cmd_result");
-
-            android.util.Log.d("PHH", "Sending command " + cmd + " returned " + ret + ":" + status);
-        } catch(Exception e) {
-            android.util.Log.d("PHH", "Failed sending command " + cmd, e);
-        }
-    }
-
-    private static void writeFile(String path, String value) {
-        try {
-            PrintWriter writer = new PrintWriter(path, "UTF-8");
-            writer.println(value);
-            writer.close();
-        } catch(Exception e) {
-            android.util.Log.d("PHH", "Failed writing to " + path + ": " + value);
-        }
-    }
-
-    private static void writeFile(File file, String value) {
-        try {
-            PrintWriter writer = new PrintWriter(file, "UTF-8");
-            writer.println(value);
-            writer.close();
-        } catch(Exception e) {
-            android.util.Log.d("PHH", "Failed writing to " + file + ": " + value);
-        }
-    }
-
-    private static String readFile(String path) {
-        try {
-            File f = new File(path);
-
-            BufferedReader b = new BufferedReader(new FileReader(f));
-            return b.readLine();
-        } catch(Exception e) {
-            return null;
-        }
-    }
 }
diff --git a/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java b/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java
index 5fc5a57bd1ef..27c31205b318 100644
--- a/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java
+++ b/services/core/java/com/android/server/biometrics/sensors/fingerprint/aidl/FingerprintProvider.java
@@ -38,7 +38,6 @@ import android.hardware.biometrics.SensorLocationInternal;
 import android.hardware.biometrics.fingerprint.IFingerprint;
 import android.hardware.biometrics.fingerprint.PointerContext;
 import android.hardware.biometrics.fingerprint.SensorProps;
-import android.hardware.biometrics.fingerprint.SensorLocation;
 import android.hardware.biometrics.fingerprint.virtualhal.IVirtualHal;
 import android.hardware.fingerprint.Fingerprint;
 import android.hardware.fingerprint.FingerprintAuthenticateOptions;
@@ -238,7 +237,6 @@ public class FingerprintProvider implements IBinder.DeathRecipient, ServiceProvi
             Slog.d(getTag(), "Adding AIDL configs");
             final List<SensorLocationInternal> workaroundLocations =
                     getWorkaroundSensorProps(mContext);
-            android.util.Log.e("PHH-Enroll", "Poping AIDL fp provider");
             for (SensorProps prop : props) {
                 addAidlSensors(prop, gestureAvailabilityDispatcher, workaroundLocations,
                         resetLockoutRequiresHardwareAuthToken);
@@ -272,27 +270,6 @@ public class FingerprintProvider implements IBinder.DeathRecipient, ServiceProvi
             @NonNull List<SensorLocationInternal> workaroundLocations,
             boolean resetLockoutRequiresHardwareAuthToken) {
         final int sensorId = prop.commonProps.sensorId;
-
-        android.util.Log.e("PHH-Enroll", "Got fp props -- pre");
-        for(SensorLocation loc: prop.sensorLocations) {
-            android.util.Log.e("PHH-Enroll", " - " + loc.sensorLocationX + ", " + loc.sensorLocationY + ", " +loc.sensorRadius + ", disp =" + loc.display + ", shape " + loc.sensorShape);
-        }
-        if (prop.sensorLocations.length == 1 && prop.sensorLocations[0].sensorLocationX == 0) {
-            int[] otherValues = com.android.server.biometrics.AuthService.dynamicUdfpsProps(mContext);
-            if (otherValues.length > 0) {
-                SensorLocation loc = new SensorLocation();
-                loc.sensorLocationX = otherValues[0];
-                loc.sensorLocationY = otherValues[1];
-                loc.sensorRadius = otherValues[2];
-                prop.sensorLocations[0] = loc;
-            }
-        }
-
-        android.util.Log.e("PHH-Enroll", "Got fp props -- post");
-        for(SensorLocation loc: prop.sensorLocations) {
-            android.util.Log.e("PHH-Enroll", " - " + loc.sensorLocationX + ", " + loc.sensorLocationY + ", " +loc.sensorRadius + ", disp =" + loc.display + ", shape " + loc.sensorShape);
-        }
-
         final Sensor sensor = new Sensor(this, mContext, mHandler, prop, mBiometricContext,
                 workaroundLocations, resetLockoutRequiresHardwareAuthToken);
         sensor.init(gestureAvailabilityDispatcher, mLockoutResetDispatcher);
-- 
2.43.0

